#!/usr/bin/env Rscript

repo=c("http://cran.ma.imperial.ac.uk/")
basePackagesR <- rownames(installed.packages(priority="base"))
lib=Sys.getenv("R_LIBS_USER")
if(lib=="") lib=file.path(Sys.getenv("HOME"), "R", "library")
if(!dir.exists(lib)) dir.create(lib, recursive=TRUE)

# Parsing ".R" files in directory to look for needed packages.
# These may have been imported explicitly using "library" or "require",
# or used without explicit import (as in "myLib::myFunction").
allRFiles <- list.files(pattern=".R$", recursive=TRUE)
pattParentheses <- "[[:space:]]*\\(+[[:space:]]*.+[[:space:]]*\\)"
pattLib <- paste("library+", pattParentheses, sep='')
pattReq <- paste("require+", pattParentheses, sep='')
patDubColon <- "[[:alpha:]]+\\w*[[:space:]]*::"
importedPkgs <- c()
doubleColonPkgs <- c()
for (file in allRFiles) {
  fLines <- readLines(file)
  importedPkgs <- c(importedPkgs, grep(pattLib, fLines, value=TRUE))
  importedPkgs <- c(importedPkgs, grep(pattReq, fLines, value=TRUE))
  doubleColonPkgs <- c(doubleColonPkgs, grep(patDubColon, fLines, value=TRUE))
}
# Keeping only package names (i.e., no punctuation, white spaces etc.)
importedPkgs <- unique(
  gsub("[\\(\\)[:space:]]", "", 
    regmatches(importedPkgs, gregexpr("\\(.*?\\)", importedPkgs))
  )
)
doubleColonPkgs <- unique(
  gsub("[:[:space:]]", "", 
    regmatches(doubleColonPkgs, gregexpr(patDubColon, doubleColonPkgs))
  )
)

# Building list of packages to be installed. Dependencies are not yet 
# considered at this stage.
pkgs <- c(importedPkgs, doubleColonPkgs)
pkgs <- unique(pkgs[!(pkgs %in% basePackagesR)])
# V8 is listed as a suggested dependency of shinyjs (and therefore not 
# installed by default by install.packages). Obsmon will crash if V8 is not
# present though. We should really force suggested dependencies to be installed,
# for the sake of reliability..
pkgs <- c(pkgs, "V8")

installedPkgs <- installed.packages(lib.loc=lib)
newPkgs <- pkgs[!(pkgs %in% installedPkgs)]

withCallingHandlers(update.packages(lib.loc=lib, repos=repo, ask=FALSE),
                    warning = function(w) stop(w))
if(length(newPkgs)>0) {
  withCallingHandlers(install.packages(newPkgs, lib=lib, repos=repo),
                      warning = function(w) stop(w))
} else {
  cat("The listed packages have already been installed.\n")
}

# Although the documented behaviour of the install.packages method is to
# install all dependencies listed under "Depends", "Imports", "LinkingTo"
# in the DESCRIPTION files of the packages to be installed, this doesn't
# always happen, it seems.
dependencies <- function(pkgName, 
                  depType=c("Depends", "Imports", "LinkingTo"),
                  availablePkgs=available.packages(repos=repo), 
                  basePackagesR=rownames(installed.packages(priority="base"))
                ) {
  # Checks, recursively, the dependencies of package pkgName
  # I am aware of tools::package_dependencies, but that method does not
  # always seem to return the dependencies in the order they should be 
  # installed.

  dependenciesStr <- tryCatch(
    paste(availablePkgs[pkgName, depType], sep=""),
    error = function(e) NULL
  )
  # Removing parentheses and enclosed text, as well as white spaces
  dependenciesStr <- gsub("\\s*\\([^\\)]+\\)","", dependenciesStr)
  dependenciesStr <- gsub("[[:space:]]", "", dependenciesStr)

  pkgDeps <- unlist(strsplit(dependenciesStr, ",", fixed=TRUE))
  pkgDeps <- pkgDeps[!(pkgDeps %in% c("R", "NA", basePackagesR))]
  
  if(length(pkgDeps)==0) {
    return(pkgDeps)
  } else {
    return(unique(c(dependencies(pkgDeps), pkgDeps)))
  }
}


cat("Checking for dependencies not installed by install.packages... \n")
installedPkgNames <- rownames(installed.packages(lib.loc=lib))
depToDependants <- list()
for (pkgName in installedPkgNames) {
  cat("  > Checking package", pkgName, "... \n")
  pkgDeps <- dependencies(pkgName)
  for (depName in pkgDeps){
    depToDependants[[depName]] <- c(depToDependants[[depName]], pkgName)
  }
}
allPkgDeps <- names(depToDependants)
missingDeps <- allPkgDeps[!(allPkgDeps %in% installedPkgNames)]

if(length(missingDeps)==0) {
  cat("All dependencies seem to have been installed. \n")
} else {
  msg_deps <- ''
  for (depName in missingDeps) {
    msg_deps <- paste(msg_deps, ">", depName,
                      "- needed by (or by dependencies of):")
                
    msg_deps <- paste(msg_deps, 
                      paste(depToDependants[[depName]], collapse=", "),
                      "\n"
                )
  }
  cat("The following missing dependencies will be installed: \n")
  cat(msg_deps)

  withCallingHandlers(install.packages(missingDeps, lib=lib, repos=repo),
                      warning = function(w) warning(w))
  warn_msg<-"Dependencies missed by install.packages and handled explicitly:\n"
  warn_msg <- paste(warn_msg, msg_deps)
  warning(warn_msg)
}
