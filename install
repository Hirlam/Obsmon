#!/usr/bin/env Rscript

args <- commandArgs(trailingOnly=TRUE)
showDepsAndQuit <- "--listdeps" %in% args
refreshDeps <- "--refreshdeps" %in% args

repo=c("http://cran.ma.imperial.ac.uk/")
basePackagesR <- rownames(installed.packages(priority="base"))
lib=Sys.getenv("R_LIBS_USER")
if(lib=="") lib=file.path(Sys.getenv("HOME"), "R", "library")
if(!dir.exists(lib)) dir.create(lib, recursive=TRUE)
depsCacheFile <- "utils/build/pkg_dependencies.Rdata"

dependencies <- function(pkgName, 
  levelOneDepsType=c("Depends", "Imports", "LinkingTo", "Suggests"),
  levelTwoDepsType=c("Depends", "Imports", "LinkingTo"),
  availablePkgs=available.packages(repos=repo), 
  exclude=rownames(installed.packages(priority="base")),
  exclude_from_suggests=c("sf")){
#  Recursively search dependencies if package pkgName.
#
#  pkgName: Package(s) for which dependencies should be searched
#  levelOneDepsType: What type of 1st-order (recursion depth 0) dependencies should be 
#           included in the search
#  levelTwoDepsType: What type of secondary (recursion depth > 0) dependencies 
#                    should be included in the search
#  exclude: Dependencies that should not be included in the return value
#
#  In principle, we should not need to write such a function, given that
#  install.packages is supposed to resolve dependencies (the behaviour 
#  implemented here is in principle equivalent to setting dependencies=TRUE
#  in install.packages). Nonetheless, from our tests on the behaviour of the
#  install.packages method itself (which defaults to recursively installing
#  all dependencies listed under "Depends", "Imports", "LinkingTo" in the 
#  DESCRIPTION files of the main packages to be installed), it seems that
#  that method can yield somewhat erratic results. This function therefore
#  gives us more control over what is to be installed.

  mainDeps <- tools::package_dependencies(pkgName, db=availablePkgs,
                       which=levelOneDepsType,
                       recursive=FALSE
                     )[[pkgName]]
  # Some "Suggests" dependencies may be problematic, and it may be better to
  # accept the risk of removing them than having to solve issues related to
  # system dependencies. The "sf" package is one of such cases at SMHI/LINDA.
  if(("Suggests" %in% levelOneDepsType) && length(exclude_from_suggests)>0) {
    mainDepsSuggestsType <- tools::package_dependencies(pkgName,
                                     db=availablePkgs,
                                     which=c("Suggests"),
                                     recursive=FALSE
                                   )[[pkgName]]
    sugDeps2BDel <- mainDepsSuggestsType[mainDepsSuggestsType %in% 
                                         exclude_from_suggests]
    mainDeps <- mainDeps[!(mainDeps %in% sugDeps2BDel)]
  }

  depsLevel2 <- tools::package_dependencies(mainDeps, db=availablePkgs,
                         which=levelTwoDepsType,
                         recursive=TRUE
                       )
  allDeps <- c()
  for (mainDep in mainDeps) {
    allDeps <- c(allDeps, depsLevel2[[mainDep]], mainDep)
  }

  allDeps <- unique(allDeps[!(allDeps %in% exclude)])
  if(is.null(allDeps)) allDeps <- character(0)
  return(allDeps)
}

cat('Gathering packages used in the ".R" files in current dir and subdirs...')
# These may have been imported explicitly using "library" or "require",
# or used without explicit import (as in "myLib::myFunction").
allRFiles <- list.files(pattern=".R$", recursive=TRUE)
pattParentheses <- "[[:space:]]*\\(+[[:space:]]*.+[[:space:]]*\\)"
pattLib <- paste("library+", pattParentheses, sep='')
pattReq <- paste("require+", pattParentheses, sep='')
patDubColon <- "[[:alpha:]]+\\w*[[:space:]]*::"
importedPkgs <- c()
doubleColonPkgs <- c()
for (file in allRFiles) {
  fLines <- readLines(file)
  importedPkgs <- c(importedPkgs, grep(pattLib, fLines, value=TRUE))
  importedPkgs <- c(importedPkgs, grep(pattReq, fLines, value=TRUE))
  doubleColonPkgs <- c(doubleColonPkgs, grep(patDubColon, fLines, value=TRUE))
}
# Keeping only package names (i.e., no punctuation, white spaces etc.)
importedPkgs <- unique(
  gsub("[\\(\\)[:space:]]", "", 
    regmatches(importedPkgs, gregexpr("\\(.*?\\)", importedPkgs))
  )
)
doubleColonPkgs <- unique(
  gsub("[:[:space:]]", "", 
    regmatches(doubleColonPkgs, gregexpr(patDubColon, doubleColonPkgs))
  )
)

# Finally building the list of main packages used.
# Dependencies are not yet considered at this stage.
mainPkgs <- c(importedPkgs, doubleColonPkgs)
mainPkgs <- sort(unique(mainPkgs[!(mainPkgs %in% basePackagesR)]))

cat("Done.\n  > The following",length(mainPkgs),"main packages were found:\n")
for (pkg in mainPkgs) {
  cat("    *", pkg, "\n")
}

cat("\n")
cat("Getting recursive dependency list: \n") 
# Doing this manually because we've had too many problems with somewhat erratic
# behaviour of the install.packages own dependency resolution
# First, attempt to read cached dependencies to avoid checking online
pkgsDeps <- list()
if(file.exists(depsCacheFile)) {
  pkgsDeps <- readRDS(depsCacheFile)
}
recursiveDepsOfMainPkgs <- c()
for (pkg in mainPkgs) {
  cat("  >", pkg, "... ")
  if(refreshDeps || !(pkg %in% names(pkgsDeps))) {
    deps <- dependencies(pkg)
    pkgsDeps[[pkg]] <- deps
  } else {
    deps <- pkgsDeps[[pkg]]
  }
  newDeps <- setdiff(deps, intersect(deps,c(mainPkgs,recursiveDepsOfMainPkgs)))
  cat("nDependencies =", length(deps), "(", length(newDeps),"new)\n")
  recursiveDepsOfMainPkgs <- c(recursiveDepsOfMainPkgs, newDeps)
}
saveRDS(pkgsDeps, file=depsCacheFile)

# At last, building the full list of pkgs to be installed
pkgs <- unique(c(recursiveDepsOfMainPkgs, mainPkgs))

cat("\n")
cat("The following packages should be available after installation:\n")
for (pkg in sort(pkgs)) {
  cat("  >", pkg, "\n")
}
cat("Total:", length(pkgs), "packages.\n \n")

if(showDepsAndQuit) {
  cat('Option "--listdeps" passed. Not installing packages. \n')
  cat('Stopping now.\n')
  quit()
}
# Installation
installedPkgs <- installed.packages(lib.loc=lib)[,1]
newPkgs <- pkgs[!(pkgs %in% installedPkgs)]

withCallingHandlers(
  update.packages(
    lib.loc=lib, repos=repo, ask=FALSE, dependencies=FALSE,
    configure.args=c(udunits2='--with-udunits2-include=/usr/include/udunits2')
  ),
  warning = function(w) warning(w)
)

if(length(newPkgs)>0) {
  withCallingHandlers(
    install.packages(
      newPkgs, lib=lib, repos=repo, dependencies=FALSE,
      configure.args=c(udunits2='--with-udunits2-include=/usr/include/udunits2')
    ),
    warning = function(w) stop(w)
  )
} else {
  cat("The listed packages have already been installed.\n")
}

